{"Name":"Scandit Barcode Scanner SDK","Id":3169,"Alias":"scandit","Description":"Scandit Barcode Scanner\n=======================\n\n**Enterprise-Grade Barcode Scanning for your Mobile App**\n\nScandit\u0027s lightning-fast and accurate Barcode Scanner is a valuable addition to any enterprise application. Our Xamarin component utilizes our unique blurry barcode scan technology that works across platforms to scan any barcode type from any angle.  \n\nPricing\n-------\n\nRegister for a free Test SDK and get your App Key on our [download page](https://ssl.scandit.com/account/customers/new?p=test).\n\n\nFeatures and Benefits\n---------------------\n\n#### Lightning-Fast Scanning from any Angle\n\nOur scan technology can capture barcodes before the camera focuses, from any angle, creating an amazingly fast and pleasant user experience.\n\n#### Supports all major 1D and 2D code types\n\nOur barcode scanner module supports UPC-A, EAN-13, EAN-8, UPC-E, Code 11, Code 39, Code 93, Code 128, Codabar, MSI Plessey, ITF (2 of 5), GS1 DataBar, QR Code, Data Matrix, PDF417 (incl. Truncated PDF417), MaxiCode, Aztec Code and Postal codes.\n\n#### Support for devices lacking autofocus\n\nOur barcode scanner module works for a wide range of low-end devices that lack autofocus capabilities, and thereby significantly expands the addressable market for your app.\n\nDocumentation\n-------\n\nCheck our Xamarin documentation to get started guides and some examples: \n\nhttp://docs.scandit.com/stable/xamarin/index.html\n\n\nMore information\n----------------\n\nTry our demo apps for Android and iOS: \n\nhttp://www.scandit.com/resources/demo-apps/\n\n\n\nSupport\n-------\n\nQuestions? Contact us at `http://www.scandit.com/contact-us/`.\n\n\n\n","Version":"5.0.1","Summary":"Enterprise-Grade Barcode Scanning for your Mobile App","QuickStart":"Scandit SDK Barcode Scanner\n===========================================\n\nUsing the Scandit SDK Barcode Scanner component in your Xamarin app is as simple as:\n\n* downloading and installing the component\n* signing up for an API key at http://www.scandit.com (free for the enterprise trial)\n* integrating the Scandit SDK component into your app by implementing the callbacks for successful scans and instantiating the ScanditSDKBarcodePicker as shown in the example code below.\n\nInstall the Scandit SDK component\n---------------------------------\n\nAdd the Scandit Barcode Scanner to your project via the Component Manager.\n\nGet an Scandit SDK App Key\n--------------------------\n\n[Sign up](https://ssl.scandit.com/account/customers/new?p=test) for a free enterprise trial license and copy your app key from within your Scandit web account.\n\n\niOS: Integrate the Scandit SDK into Your iOS App\n---------------------------------------\n\nIf you don\u0027t want to type the whole namespace each time when using the scanner you should add a using directive at the top of the class you will use the scanner in:\n\n```csharp\nusing ScanditBarcodeScanner.iOS;\n```\nSet the app key in your AppDelegate\u0027s FinishedLaunching method the following way:\n\n```csharp\n@implementation AppDelegate\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n    // Provide the app key for your scandit license.\n    License.SetAppKey(@\"--- ENTER YOUR SCANDIT APP KEY HERE ---\");\n\n    // ...\n}\n```\nImplement the ScanDelegate protocol to handle the successful barcode decoding. The API reference of the ScanDelegate protocol provides more details about what is returned.\n\n**Careful:** The ScanDelegate method is invoked on a picker-internal queue. To perform any UI work, you must dispatch to the main UI thread.\n\n```csharp\n    public class PickerScanDelegate : ScanDelegate {\n\n        UIViewController presentingViewController;\n\n        public PickerScanDelegate(UIViewController controller) {\n            presentingViewController = controller;\n        }\n\n        public override void DidScan (BarcodePicker picker, IScanSession session) {\n            NSArray recognized = session.NewlyRecognizedCodes;\n            Barcode code = recognized.GetItem\u003cBarcode\u003e (0);\n\n            // Add your own code to handle the barcode result e.g.\n            Console.WriteLine(\"scanned {0} barcode: {1}\", code.Symbology, code.Data);\n        }\n    }\n```\n\nAnd then set the scan delegate on the picker.\n\n**Careful:** Since a change around iOS 9 the delegates are only softly referenced and can be dereferenced and deallocated if the memory is low. To avoid this you should keep a reference to them until you no longer use the picker (for example by creating a class variable for the delegates in the presenting view controller).\n\n```csharp\nscanDelegate = new PickerScanDelegate(this);\npicker.ScanDelegate = scanDelegate;\n```\n\nThe scanning process is started by instantiating the  BarcodePicker, specifying the delegate that will receive the scan callback event and then starting the scanner.\n\n```csharp\n    // Configure the barcode picker through a scan settings instance by defining which\n    // symbologies should be enabled.\n    ScanSettings settings = ScanSettings.DefaultSettings ();\n\n    // prefer backward facing camera over front-facing cameras.\n    settings.CameraFacingDirection = CameraFacingDirection.Back;\n\n    // Enable symbologies that you want to scan.\n    settings.SetSymbologyEnabled (Symbology.EAN13, true);\n    settings.SetSymbologyEnabled (Symbology.UPC12, true);\n    settings.SetSymbologyEnabled (Symbology.QR, true);\n\n    // Setup the barcode scanner.\n    BarcodePicker picker = new BarcodePicker (settings);\n\n    // Set the delegate to receive scan events.\n    scanDelegate = new PickerScanDelegate(this);\n    picker.ScanDelegate = scanDelegate;\n\n   // Start the scanning process.\n    picker.StartScanning ();\n\n    // Show the scanner. The easiest way to do so is by presenting it modally.\n    PresentViewController (picker, true, null);\n```\n\n\nAndroid: Integrate the Scandit SDK into Your Android App\n---------------------------------------\n\nIf not already done, grant your application the right to access the camera. You will need to open the project settings and go to Build-\u003eAndroidApplication where you can find a list of \"Required permissions\". Look for \"Camera\" and select it if it is not yet selected.\n\nIf you don\u0027t want to type the whole namespace each time when using the scanner you should add a using directive at the top of the class you will use the scanner in:\n\n```csharp\nusing ScanditBarcodeScanner.Android;\nusing ScanditBarcodeScanner.Android.Recognition;\n```\nTo receive events from the Scandit Barcode Scanner SDK you have to implement the OnScanListener interface.\n\nIf your class is an activity called DemoActivity, it looks something like this:\n\n```csharp\npublic class DemoActivity : Activity, IOnScanListener {\n}\n```\n\nAdd the following callback methods to the class (as defined by the interface):\n\n```csharp\n    public void DidScan(IScanSession session) {\n        // This callback is called whenever a barcode is decoded.\n    }\n```\n\nThe scanning process is managed by the BarcodePicker. The barcode scanning is configured through an instance of ScanSettings that you pass to the BarcodePicker constructor.\n\n```csharp\n// Set your app key\nScanditLicense.AppKey(\"--- ENTER YOUR SCANDIT APP KEY HERE ---\");\n\nScanSettings settings = ScanSettings.Create();\nsettings.SetSymbologyEnabled(Barcode.SymbologyEan13, true);\nsettings.SetSymbologyEnabled(Barcode.SymbologyUpca, true);\n\n// Instantiate the barcode picker by using the settings defined above.\nBarcodePicker picker = new BarcodePicker(this, settings);\n\n// Set the on scan listener to receive barcode scan events.\npicker.SetOnScanListener(this);\n```\n\nShow the scanner to the user. The easiest way to do so is by setting it as the content view of your activity:\n\n```csharp\nSetContentView(mPicker);\n```\n\nStarting and stopping should normally happen in the OnPause() and OnResume() methods of the same activity or fragment that contains the picker.\n\n```csharp\nprivate BarcodePicker picker;\n\nprotected override void onResume() {\n    picker.StartScanning();\n    base.OnResume();\n}\n\nprotected override void OnPause() {\n    picker.StopScanning();\n    base.OnPause();\n}\n```\n\nMore information\n----------------\n\nTry our demo apps for Android and iOS: \n\nhttp://www.scandit.com/resources/demo-apps/\n\nAccess our documentation and getting started guides: \n\nhttp://docs.scandit.com\n\n\nSupport\n-------\n\nQuestions? Contact `support@scandit.com`.\n","Hash":"61bbafeffcdc190220a2eef0f90d41e7","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}